package com.example.Hafen_DB.controller;
import com.example.Hafen_DB.models.Normalware;
import java.util.ArrayList;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;

public class DBNormalwareController extends DBController{
    
    public DBNormalwareController(){
    }

    public ArrayList<Normalware> getAllNormalwaren(){

        ArrayList<Normalware> normalware = new ArrayList<>();
        // Das ist DB-Query
        String sqlSelectAllNormalware = "SELECT * FROM `normalware`";

        try{
            Connection conn = DriverManager.getConnection(getConnectionUrl(), getUsername(), getPasswort()); 
            PreparedStatement ps = conn.prepareStatement(sqlSelectAllNormalware); 
            ResultSet rs = ps.executeQuery();
            // Solange es Datensätze in der von der DB angefragen Ressource gibt, werden diese durchgearbeitet und dann als eine ArrayList zurückgegeben
            while (rs.next()) {
                int id = (int) rs.getLong("id");
                String normalware_name = rs.getString("normalware_name");
                normalware.add(new Normalware(id, normalware_name));
            }
        }
        catch(SQLException e){
            System.out.println(e);
        }

        return normalware;
    }

    public void addNewNormalware(String normalware_name) {
        try{
            String sqlSelectAllNormalware = "INSERT INTO normalware(normalware_name) VALUES('"+normalware_name+"');";
            Connection conn = DriverManager.getConnection(getConnectionUrl(), getUsername(), getPasswort());
            //Rückfrage!
            PreparedStatement ps = conn.prepareStatement(sqlSelectAllNormalware); 
            // als Return von executeUpdate kommt 0 (FAIL) oder 1 (OK!) zurück
            int rs = ps.executeUpdate();
            System.out.println(rs);
        }
        catch(SQLException e){
            System.out.println(e);
        }
    }

    public void delNormalware(int id){
        try{

            String sqlSelectAllNormalware = "DELETE FROM `normalware` WHERE id="+String.valueOf(id);
            Connection conn = DriverManager.getConnection(getConnectionUrl(), getUsername(), getPasswort());
            PreparedStatement ps = conn.prepareStatement(sqlSelectAllNormalware); 
            // als Return von executeUpdate kommt 0 (FAIL) oder 1 (OK!) zurück
            int rs = ps.executeUpdate();
            System.out.println(rs);
        }
        catch(SQLException e){
            System.out.println(e);
        }
    }


    public Normalware getNormalware(int id){
        Normalware normalware = null;
        try{
            String sqlSelectAllNormalware = "SELECT * FROM `normalware` WHERE normalware.id="+String.valueOf(id);
            Connection conn = DriverManager.getConnection(getConnectionUrl(), getUsername(), getPasswort()); 
            PreparedStatement ps = conn.prepareStatement(sqlSelectAllNormalware); 
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                int normalwareId = (int) rs.getLong("id");
                String normalware_name = rs.getString("normalware_name");
                normalware = new Normalware(normalwareId, normalware_name);
            }
        }
        catch(SQLException e){
            System.out.println(e);
        }

        return normalware;
    }

    // Hole spezifischen Bahnhof und aktualisiere diese ab
    public Normalware updateNormalware(int id, String normalware_name){
        Normalware normalware = null;
        try{
            String sqlSelectAllNormalware = "UPDATE `normalware` SET normalware_name='"+normalware_name+"' WHERE id="+String.valueOf(id);
            Connection conn = DriverManager.getConnection(getConnectionUrl(), getUsername(), getPasswort()); 
            PreparedStatement ps = conn.prepareStatement(sqlSelectAllNormalware); 
            ps.executeUpdate();
        }
        catch(SQLException e){
            System.out.println(e);
        }

        return normalware;
    }
}
